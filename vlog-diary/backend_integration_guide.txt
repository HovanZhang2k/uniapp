# Vlog日记应用 - 前后端对接指南

本文档描述了Vlog日记应用的前后端对接需求，包括API接口规范、数据库设计和实现建议。前端已经实现了一个模拟后端层，在实际后端开发完成后只需要修改API接口文件即可无缝集成。

## 1. 概述

Vlog日记应用是一个允许用户记录日常生活的平台，用户可以创建、编辑、删除日记，并且可以上传Vlog视频和封面图片。

当前前端已经实现的功能：
- 用户认证（登录/注册）
- 日记管理（创建/编辑/删除/查看）
- 媒体文件管理（上传/获取/删除）

## 2. API接口规范

所有API接口遵循RESTful设计原则，使用JSON格式通信。

### 2.1 基础返回格式

所有接口返回统一格式：

```json
{
  "success": true/false,         // 请求是否成功
  "data": {},                    // 成功时返回的数据
  "error": "错误信息",           // 失败时返回的错误信息
  "meta": {}                     // 可选的元数据，如分页信息
}
```

### 2.2 认证相关接口

#### 2.2.1 用户登录

- **URL**: `/auth/login`
- **Method**: `POST`
- **权限**: 无需认证
- **请求参数**:
  ```json
  {
    "username": "string",  // 用户名/邮箱/手机号
    "password": "string"   // 密码
  }
  ```
- **成功响应**:
  ```json
  {
    "success": true,
    "data": {
      "id": "string",
      "username": "string",
      "token": "string",
      "avatarPath": "string"
    }
  }
  ```

#### 2.2.2 用户注册

- **URL**: `/auth/register`
- **Method**: `POST`
- **权限**: 无需认证
- **请求参数**:
  ```json
  {
    "username": "string",  // 用户名/邮箱/手机号
    "password": "string"   // 密码
  }
  ```
- **成功响应**:
  ```json
  {
    "success": true,
    "data": {
      "id": "string",
      "username": "string"
    }
  }
  ```

#### 2.2.3 检查用户名是否存在

- **URL**: `/auth/check-username`
- **Method**: `GET`
- **权限**: 无需认证
- **查询参数**: `username=xxx`
- **成功响应**:
  ```json
  {
    "success": true,
    "exists": true/false
  }
  ```

#### 2.2.4 获取用户信息

- **URL**: `/auth/user`
- **Method**: `GET`
- **权限**: 需要认证
- **成功响应**:
  ```json
  {
    "success": true,
    "data": {
      "id": "string",
      "username": "string",
      "avatarPath": "string"
    }
  }
  ```

#### 2.2.5 退出登录

- **URL**: `/auth/logout`
- **Method**: `POST`
- **权限**: 需要认证
- **成功响应**:
  ```json
  {
    "success": true
  }
  ```

### 2.3 日记相关接口

#### 2.3.1 获取日期的日记列表

- **URL**: `/diaries`
- **Method**: `GET`
- **权限**: 需要认证
- **查询参数**: 
  - `date`: 日期格式YYYY-MM-DD
  - `userId`: 用户ID
- **成功响应**:
  ```json
  {
    "success": true,
    "data": [
      {
        "id": "string",
        "userId": "string",
        "username": "string",
        "date": "YYYY-MM-DD",
        "title": "string",
        "content": "string",
        "vlogUrl": "string",
        "coverUrl": "string",
        "createdAt": "string",
        "updatedAt": "string"
      }
    ]
  }
  ```

#### 2.3.2 获取日记详情

- **URL**: `/diaries/:id`
- **Method**: `GET`
- **权限**: 需要认证
- **查询参数**: `userId`: 用户ID
- **成功响应**:
  ```json
  {
    "success": true,
    "data": {
      "id": "string",
      "userId": "string",
      "username": "string",
      "date": "YYYY-MM-DD",
      "title": "string",
      "content": "string",
      "vlogUrl": "string",
      "coverUrl": "string",
      "createdAt": "string",
      "updatedAt": "string"
    }
  }
  ```

#### 2.3.3 创建日记

- **URL**: `/diaries`
- **Method**: `POST`
- **权限**: 需要认证
- **请求参数**:
  ```json
  {
    "userId": "string",
    "username": "string",
    "date": "YYYY-MM-DD",
    "title": "string",
    "content": "string",
    "vlogUrl": "string",
    "coverUrl": "string"
  }
  ```
- **成功响应**:
  ```json
  {
    "success": true,
    "data": {
      "id": "string",
      "userId": "string",
      "username": "string",
      "date": "YYYY-MM-DD",
      "title": "string",
      "content": "string",
      "vlogUrl": "string",
      "coverUrl": "string",
      "createdAt": "string"
    }
  }
  ```

#### 2.3.4 更新日记

- **URL**: `/diaries/:id`
- **Method**: `PUT`
- **权限**: 需要认证
- **请求参数**:
  ```json
  {
    "userId": "string",
    "title": "string",
    "content": "string",
    "vlogUrl": "string",
    "coverUrl": "string"
  }
  ```
- **成功响应**:
  ```json
  {
    "success": true,
    "data": {
      "id": "string",
      "updatedAt": "string"
    }
  }
  ```

#### 2.3.5 删除日记

- **URL**: `/diaries/:id`
- **Method**: `DELETE`
- **权限**: 需要认证
- **查询参数**: `userId`: 用户ID
- **成功响应**:
  ```json
  {
    "success": true
  }
  ```

### 2.4 媒体文件相关接口

#### 2.4.1 获取媒体文件列表

- **URL**: `/media`
- **Method**: `GET`
- **权限**: 需要认证
- **查询参数**: 
  - `userId`: 用户ID
  - `page`: 页码
  - `pageSize`: 每页数量
- **成功响应**:
  ```json
  {
    "success": true,
    "data": {
      "files": [
        {
          "id": "string",
          "userId": "string",
          "filePath": "string",
          "fileType": "string",
          "fileSize": "number",
          "createdAt": "string"
        }
      ],
      "pagination": {
        "page": "number",
        "pageSize": "number",
        "total": "number",
        "totalPages": "number"
      }
    }
  }
  ```

#### 2.4.2 上传媒体文件

- **URL**: `/media/upload`
- **Method**: `POST`
- **权限**: 需要认证
- **请求参数**: 表单数据，包含文件和以下字段
  ```json
  {
    "userId": "string",
    "fileType": "string"
  }
  ```
- **成功响应**:
  ```json
  {
    "success": true,
    "data": {
      "id": "string",
      "filePath": "string",
      "fileType": "string",
      "fileSize": "number",
      "createdAt": "string"
    }
  }
  ```

#### 2.4.3 删除媒体文件

- **URL**: `/media/:id`
- **Method**: `DELETE`
- **权限**: 需要认证
- **查询参数**: `userId`: 用户ID
- **成功响应**:
  ```json
  {
    "success": true
  }
  ```

#### 2.4.4 批量删除媒体文件

- **URL**: `/media/batch-delete`
- **Method**: `DELETE`
- **权限**: 需要认证
- **请求参数**:
  ```json
  {
    "userId": "string",
    "fileIds": ["string"]
  }
  ```
- **成功响应**:
  ```json
  {
    "success": true
  }
  ```

#### 2.4.5 获取存储统计

- **URL**: `/media/stats`
- **Method**: `GET`
- **权限**: 需要认证
- **查询参数**: `userId`: 用户ID
- **成功响应**:
  ```json
  {
    "success": true,
    "stats": {
      "totalFiles": "number",
      "totalSize": "number"
    }
  }
  ```

## 3. 数据库设计

### 3.1 用户表 (users)

| 字段名      | 类型       | 说明                     |
|------------|------------|-------------------------|
| id         | VARCHAR    | 主键，用户唯一标识       |
| username   | VARCHAR    | 用户名/邮箱/手机号，唯一 |
| password   | VARCHAR    | 密码（加密存储）        |
| avatar     | VARCHAR    | 头像路径                |
| created_at | TIMESTAMP  | 创建时间                |
| updated_at | TIMESTAMP  | 更新时间                |

### 3.2 日记表 (diaries)

| 字段名      | 类型       | 说明                     |
|------------|------------|-------------------------|
| id         | VARCHAR    | 主键，日记唯一标识       |
| user_id    | VARCHAR    | 外键，关联用户表id       |
| username   | VARCHAR    | 用户名，冗余字段         |
| date       | DATE       | 日记日期                |
| title      | VARCHAR    | 日记标题                |
| content    | TEXT       | 日记内容                |
| vlog_url   | VARCHAR    | 视频路径                |
| cover_url  | VARCHAR    | 封面图片路径            |
| created_at | TIMESTAMP  | 创建时间                |
| updated_at | TIMESTAMP  | 更新时间                |

### 3.3 媒体文件表 (media_files)

| 字段名      | 类型       | 说明                     |
|------------|------------|-------------------------|
| id         | VARCHAR    | 主键，文件唯一标识       |
| user_id    | VARCHAR    | 外键，关联用户表id       |
| file_path  | VARCHAR    | 文件路径                |
| file_type  | VARCHAR    | 文件类型                |
| file_size  | INTEGER    | 文件大小(字节)          |
| created_at | TIMESTAMP  | 创建时间                |
| updated_at | TIMESTAMP  | 更新时间                |

## 4. 前端修改指南

当后端开发完成后，前端需要做以下修改以集成真实后端：

### 4.1 修改API基础配置

1. 打开 `src/api/index.js` 文件
2. 修改 `BASE_URL` 常量为真实后端地址
3. 注释或删除模拟数据相关的代码，包括：
   - `mockAPIRequest` 函数
   - `handleAuthRequests`、`handleDiaryRequests`、`handleMediaRequests` 函数
   - `getMockData` 和 `setMockData` 函数

### 4.2 修改请求逻辑

将 `request` 函数中的模拟数据部分注释或删除：

```javascript
async function request(url, method, data = {}, useToken = true) {
  // 删除或注释以下代码块
  /*
  if (process.env.NODE_ENV === 'development') {
    console.log(`[模拟后端] ${method} ${url}`, data);
    
    await new Promise(resolve => setTimeout(resolve, Math.random() * 300 + 100)); 
    
    const mockResult = await mockAPIRequest(url, method, data);
    return mockResult;
  }
  */
  
  // 保留真实请求部分的代码...
}
```

### 4.3 添加错误处理

确保添加适当的错误处理，处理可能出现的各种HTTP状态码和网络问题。

### 4.4 处理文件上传

对于媒体文件上传接口，需要特别处理表单数据的发送方式：

```javascript
uploadFile: async (file, fileType) => {
  const userInfo = uni.getStorageSync('userInfo');
  
  const formData = new FormData();
  formData.append('file', file);
  formData.append('userId', userInfo?.id);
  formData.append('fileType', fileType);
  
  return new Promise((resolve, reject) => {
    uni.uploadFile({
      url: `${BASE_URL}/media/upload`,
      filePath: file,
      name: 'file',
      formData: {
        userId: userInfo?.id,
        fileType: fileType
      },
      success: (res) => {
        const data = JSON.parse(res.data);
        resolve(data);
      },
      fail: (err) => {
        reject(err);
      }
    });
  });
}
```

## 5. 安全考虑

### 5.1 认证与授权

- 使用JWT (JSON Web Token) 进行认证
- 设定合理的token过期时间
- 实现token刷新机制
- 确保用户只能访问和修改自己的数据

### 5.2 密码安全

- 使用bcrypt等算法对密码进行加密存储
- 实现密码复杂度验证
- 考虑添加密码重置功能

### 5.3 数据验证

- 在后端对所有接收的数据进行严格验证
- 对敏感内容进行过滤和转义
- 实现请求频率限制，防止暴力攻击

### 5.4 文件上传安全

- 限制上传文件大小和类型
- 对上传的文件进行安全扫描
- 使用随机文件名存储文件，避免文件名冲突

## 6. 部署建议

### 6.1 后端部署

- 使用Nginx作为反向代理
- 配置SSL证书，确保HTTPS连接
- 考虑使用CDN分发静态资源和媒体文件
- 实现后端服务的负载均衡和水平扩展

### 6.2 数据库部署

- 配置数据库主从复制，提高读取性能
- 实现定期数据备份机制
- 对敏感数据进行加密存储

### 6.3 监控与日志

- 实现系统监控，及时发现性能问题
- 记录详细的操作日志，方便问题排查
- 考虑实现用户行为分析，持续优化产品

## 7. 开发建议

### 7.1 优先级排序

开发后端时，建议按以下优先级实现功能：
1. 用户认证系统（登录/注册）
2. 日记基本管理（创建/获取）
3. 媒体文件上传与管理
4. 日记更多功能（编辑/删除）
5. 更高级功能（数据分析、社交功能等）

### 7.2 测试策略

- 编写单元测试，确保每个API接口正常工作
- 进行集成测试，验证各个模块的协同工作
- 模拟高负载场景，进行性能测试
- 进行安全测试，发现潜在漏洞

### 7.3 API版本控制

考虑在API路径中添加版本号（如 `/api/v1/auth/login`），方便未来API的迭代和升级。 